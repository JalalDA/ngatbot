
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  fullName  String   @map("full_name")
  role      String   @default("user")
  level     String   @default("basic")
  credits   Int      @default(250)
  createdAt DateTime @default(now()) @map("created_at")

  bots            Bot[]
  transactions    Transaction[]
  smmProviders    SmmProvider[]
  smmServices     SmmService[]
  smmOrders       SmmOrder[]
  autoBots        AutoBot[]
  paymentSettings PaymentSettings[]
  apiKeys         ApiKey[]

  @@map("users")
}

model Bot {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  token        String
  botName      String   @map("bot_name")
  botUsername  String   @map("bot_username")
  systemPrompt String?  @default("You are a helpful assistant that can answer questions and provide information.") @map("system_prompt")
  isActive     Boolean  @default(true) @map("is_active")
  messageCount Int      @default(0) @map("message_count")
  createdAt    DateTime @default(now()) @map("created_at")

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  knowledge Knowledge[]

  @@map("bots")
}

model Knowledge {
  id        Int      @id @default(autoincrement())
  botId     Int      @map("bot_id")
  type      String
  content   String
  url       String?
  fileName  String?  @map("file_name")
  createdAt DateTime @default(now()) @map("created_at")

  bot Bot @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@map("knowledge")
}

model Transaction {
  id               Int      @id @default(autoincrement())
  userId           Int      @map("user_id")
  plan             String
  amount           Int
  status           String   @default("pending")
  midtransOrderId  String?  @unique @map("midtrans_order_id")
  snapToken        String?  @map("snap_token")
  paymentInfo      String?  @map("payment_info")
  createdAt        DateTime @default(now()) @map("created_at")

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  smmOrders SmmOrder[]

  @@map("transactions")
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("settings")
}

model SmmProvider {
  id               Int       @id @default(autoincrement())
  userId           Int       @map("user_id")
  name             String
  apiKey           String    @map("api_key")
  apiEndpoint      String    @map("api_endpoint")
  balance          Decimal   @default(0) @db.Decimal(15, 2)
  currency         String?   @default("USD")
  balanceUpdatedAt DateTime? @map("balance_updated_at")
  isActive         Boolean   @default(true) @map("is_active")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  smmServices SmmService[]
  smmOrders   SmmOrder[]

  @@map("smm_providers")
}

model SmmService {
  id           Int     @id @default(autoincrement())
  userId       Int     @map("user_id")
  providerId   Int     @map("provider_id")
  mid          Int
  name         String
  description  String?
  min          Int
  max          Int
  rate         Decimal @db.Decimal(10, 2)
  category     String
  serviceIdApi String  @map("service_id_api")
  isActive     Boolean @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider SmmProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  orders   SmmOrder[]

  @@map("smm_services")
}

model SmmOrder {
  id                Int       @id @default(autoincrement())
  userId            Int       @map("user_id")
  serviceId         Int       @map("service_id")
  providerId        Int       @map("provider_id")
  orderId           String    @unique @map("order_id")
  providerOrderId   String?   @map("provider_order_id")
  transactionId     Int?      @map("transaction_id")
  link              String
  quantity          Int
  amount            Decimal   @db.Decimal(10, 2)
  status            String    @default("pending")
  paymentStatus     String    @default("pending") @map("payment_status")
  startCount        Int?      @map("start_count")
  remains           Int?
  notes             String?
  errorMessage      String?   @map("error_message")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  service     SmmService   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  provider    SmmProvider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  transaction Transaction? @relation(fields: [transactionId], references: [id])

  @@map("smm_orders")
}

model AutoBot {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  token           String   @unique
  botName         String   @map("bot_name")
  botUsername     String   @map("bot_username")
  welcomeMessage  String   @default("Selamat datang! Silakan pilih opsi di bawah ini:") @map("welcome_message")
  welcomeImageUrl String?  @map("welcome_image_url")
  keyboardConfig  Json?    @map("keyboard_config")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auto_bots")
}

model PaymentSettings {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  serverKey    String   @map("server_key")
  clientKey    String   @map("client_key")
  isProduction Boolean  @default(false) @map("is_production")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_settings")
}

model ApiKey {
  id               Int       @id @default(autoincrement())
  userId           Int       @map("user_id")
  name             String
  apiKey           String    @unique @map("api_key")
  apiEndpoint      String?   @map("api_endpoint")
  balance          Decimal   @default(0) @db.Decimal(15, 7)
  isActive         Boolean   @default(true) @map("is_active")
  totalRequests    Int       @default(0) @map("total_requests")
  totalOrders      Int       @default(0) @map("total_orders")
  totalRevenue     Decimal   @default(0.00) @db.Decimal(10, 2) @map("total_revenue")
  lastUsed         DateTime? @map("last_used")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")
  balanceUpdatedAt DateTime? @map("balance_updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model TelegramOrder {
  id                     Int       @id @default(autoincrement())
  orderId                String    @unique @map("order_id")
  botToken               String    @map("bot_token")
  telegramUserId         String    @map("telegram_user_id")
  telegramUsername       String?   @map("telegram_username")
  serviceId              String    @map("service_id")
  serviceName            String    @map("service_name")
  quantity               Int
  amount                 Decimal   @db.Decimal(10, 2)
  currency               String    @default("IDR")
  status                 String    @default("pending")
  midtransTransactionId  String?   @map("midtrans_transaction_id")
  qrisUrl                String?   @map("qris_url")
  targetLink             String?   @map("target_link")
  resultLink             String?   @map("result_link")
  paymentExpiredAt       DateTime? @map("payment_expired_at")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("telegram_orders")
}

model TelegramService {
  id          Int     @id @default(autoincrement())
  botToken    String  @map("bot_token")
  serviceId   String  @map("service_id")
  serviceName String  @map("service_name")
  category    String
  description String?
  price       Decimal @db.Decimal(10, 2)
  minQuantity Int     @default(1) @map("min_quantity")
  maxQuantity Int     @default(10000) @map("max_quantity")
  isActive    Boolean @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("telegram_services")
}

model TelegramPaymentSettings {
  id                     Int      @id @default(autoincrement())
  botToken               String   @unique @map("bot_token")
  botOwnerId             String   @map("bot_owner_id")
  midtransServerKey      String?  @map("midtrans_server_key")
  midtransClientKey      String?  @map("midtrans_client_key")
  midtransIsProduction   Boolean  @default(false) @map("midtrans_is_production")
  isConfigured           Boolean  @default(false) @map("is_configured")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("telegram_payment_settings")
}
